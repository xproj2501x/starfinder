/**
 * Starfinder - Template Manager
 * ===
 *
 * @module templateManager
 */

////////////////////////////////////////////////////////////////////////////////
// Imports
////////////////////////////////////////////////////////////////////////////////
import AjaxService from '../services/ajax-service';

////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Class
////////////////////////////////////////////////////////////////////////////////
/**
 * TemplateManager
 * @class
 */
class TemplateManager {

  //////////////////////////////////////////////////////////////////////////////
  // Private Properties
  //////////////////////////////////////////////////////////////////////////////
  _ajaxService;

  //////////////////////////////////////////////////////////////////////////////
  // Public Properties
  //////////////////////////////////////////////////////////////////////////////

  /**
   * TemplateManager
   * @constructor
   */
  constructor() {

  }

  //////////////////////////////////////////////////////////////////////////////
  // Public Methods
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Private Methods
  //////////////////////////////////////////////////////////////////////////////
  _loadTemplate(template) {
    if (!this._templates[template]) {
      return this._ajaxService.get({
        url: template
      }).then((response) => {
        const TEMPLATE = response.responseText;
        this._templates[template] = TEMPLATE;
        return TEMPLATE;
      }).catch((err) => {
        console.log('error');
        console.log(err);
      });
    }
    return this._templates[name];
  }

  //////////////////////////////////////////////////////////////////////////////
  // Static Methods
  //////////////////////////////////////////////////////////////////////////////
  /**
   * Static factory method
   * @returns {TemplateManager}
   */
  static create() {
    return new TemplateManager();
  }

}

////////////////////////////////////////////////////////////////////////////////
// Exports
////////////////////////////////////////////////////////////////////////////////
export default TemplateManager;
