/**
 * Framework - Router
 * ===
 *
 * @module router
 */

////////////////////////////////////////////////////////////////////////////////
// Imports
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////
/**
 * Example Routes
 * {
 *  name: 'Home'
 *  route: '/'
 *  view: HomeView
 * }
 * {
 *  name: 'Characters'
 *  route: '/characters'
 *  view: CharactersView
 * }
 */
////////////////////////////////////////////////////////////////////////////////
// Class
////////////////////////////////////////////////////////////////////////////////
class Router {

  //////////////////////////////////////////////////////////////////////////////
  // Private Properties
  //////////////////////////////////////////////////////////////////////////////
  _routes;
  _path;
  _search;
  _hash;

  //////////////////////////////////////////////////////////////////////////////
  // Public Properties
  //////////////////////////////////////////////////////////////////////////////

  constructor() {
    this._routes = {};

  }

  //////////////////////////////////////////////////////////////////////////////
  // Public Methods
  //////////////////////////////////////////////////////////////////////////////
  loadRoute(route) {
    if (route) return;
    const URL = this._parseUrl();

    return this._getRoute(URL);
  }

  addRoute(route) {
    this._routes[route.name] = route;
  }
  //////////////////////////////////////////////////////////////////////////////
  // Private Methods
  //////////////////////////////////////////////////////////////////////////////
  _parseUrl() {
    return window.location.hash.split('#/')[1];
  }



  _getRoute(name) {
    return this._routes[name];
  }
  //////////////////////////////////////////////////////////////////////////////
  // Static Methods
  //////////////////////////////////////////////////////////////////////////////
  /**
   * Static factory method
   * @return {Router}
   */
  static create() {
    return new Router();
  }
}

////////////////////////////////////////////////////////////////////////////////
// Exports
////////////////////////////////////////////////////////////////////////////////
export default Router;
