/**
 * Framework
 * ===
 *
 * @module framework
 */

////////////////////////////////////////////////////////////////////////////////
// Imports
////////////////////////////////////////////////////////////////////////////////
import Container from './dependency-injection/container';
import Router from './router';
import ViewManager from './view/view-manager';

////////////////////////////////////////////////////////////////////////////////
// Class
////////////////////////////////////////////////////////////////////////////////
/**
 * Framework
 * @class
 */
class Framework {

  //////////////////////////////////////////////////////////////////////////////
  // Private Properties
  //////////////////////////////////////////////////////////////////////////////
  _config;
  _container;
  _router;
  _viewManager;

  //////////////////////////////////////////////////////////////////////////////
  // Public Properties
  //////////////////////////////////////////////////////////////////////////////

  /**
   * Framework
   * @constructor
   */
  constructor() {
    this._load();
  }

  //////////////////////////////////////////////////////////////////////////////
  // Public Methods
  //////////////////////////////////////////////////////////////////////////////
  /**
   * Starts the web application
   */
  start() {
    const ROUTE = this._router.loadRoute();

    this._viewManager.loadView(ROUTE.name);
  }

  /**
   * Configures the web application
   * @param {object} config - settings for the app
   */
  configure(config) {
    for (const KEY in config) {
      if (config.hasOwnProperty(KEY)) {
        const ROUTE = config[KEY];

        this._router.addRoute(ROUTE);
        this._viewManager.addView(ROUTE);
      }
    }
  }
  //////////////////////////////////////////////////////////////////////////////
  // Private Methods
  //////////////////////////////////////////////////////////////////////////////
  /**
   * Loads dependencies for the framework
   * @private
   */
  _load() {
    this._container = Container.create();
    this._router = Router.create();
    this._viewManager = ViewManager.create();
    document.addEventListener('DOMContentLoaded', () => this.start());
  }
  //////////////////////////////////////////////////////////////////////////////
  // Static Methods
  //////////////////////////////////////////////////////////////////////////////
  /**
   * Static factory method
   * @static
   * @return {Framework}
   */
  static create() {
    return new Framework();
  }
}

////////////////////////////////////////////////////////////////////////////////
// Exports
////////////////////////////////////////////////////////////////////////////////
export default Framework;
