/**
 * Starfinder - System Manager
 * ===
 *
 * @module system
 */

////////////////////////////////////////////////////////////////////////////////
// Imports
////////////////////////////////////////////////////////////////////////////////
import { MESSAGES } from './constants';

////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Class
////////////////////////////////////////////////////////////////////////////////
class SystemManager {

  //////////////////////////////////////////////////////////////////////////////
  // Private Properties
  //////////////////////////////////////////////////////////////////////////////
  /**
   * @private
   * @type {Logger}
   */
  _logger;

  /**
   * @private
   * @type {MessageService}
   */
  _messageService;

  /**
   * Collection of systems registered with the System Manager
   * @private
   * @type {Array}
   */
  _systems;

  ////////////////////////////////////////////////////////////////////////////////
  // Public Properties
  ////////////////////////////////////////////////////////////////////////////////

  /**
   * SystemManager
   * @constructor
   * @param {object} config - configuration for the system manager
   */
  constructor(config) {
    this._logger = config.LOG_SERVICE.registerLogger(this.constructor.name);
    this._messageService = config.MESSAGE_SERVICE;
    this._messageService.subscribe(MESSAGES.LOAD_MODULE, (message) => this.loadModule(message));
    this._messageService.subscribe(MESSAGES.UNLOAD_MODULE, (message) => this.unloadModule(message));

    this._systems = [];
    config.systems.forEach((system) => {
      this._loadSystem(system, config);
    });
    this._activeSystems = [];
  }

  ////////////////////////////////////////////////////////////////////////////////
  // Public Methods
  ////////////////////////////////////////////////////////////////////////////////

  ///////////////////////////////////////////////////////////////////////////////
  // Private Methods
  ///////////////////////////////////////////////////////////////////////////////
  _loadSystem(system, config) {
    this._systems.push(system.create(config));
  }

  //////////////////////////////////////////////////////////////////////////////
  // Static Methods
  //////////////////////////////////////////////////////////////////////////////
  /**
   * Static factory method
   * @static
   * @param {object} config - configuration for the entity manager
   * @returns {SystemManager}
   */
  static create(config) {
    return new SystemManager(config);
  }
}

////////////////////////////////////////////////////////////////////////////////
// Exports
////////////////////////////////////////////////////////////////////////////////
export default SystemManager;
