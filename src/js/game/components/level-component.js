/**
 * Starfinder - Level Component
 * ===
 *
 * @module levelComponent
 */

////////////////////////////////////////////////////////////////////////////////
// Imports
////////////////////////////////////////////////////////////////////////////////
import Component from '../../engine/component';

////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////
/**
 * Proprty names for the component
 * @enum {string}
 */
const KEYS = {
  EXPERIENCE: 'experience'
};

/**
 * Default values for the component
 * @enum {*}
 */
const DEFAULTS = {
  experience: 0
};

////////////////////////////////////////////////////////////////////////////////
// Class
////////////////////////////////////////////////////////////////////////////////
/**
 * LevelComponent
 * @class
 * @extends Component
 */
class LevelComponent extends Component {

  //////////////////////////////////////////////////////////////////////////////
  // Private Properties
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Public Properties
  //////////////////////////////////////////////////////////////////////////////


  /**
   * LevelComponent
   * @constructor
   * @param {string} id - the UUID of the parent entity
   * @param {object} state - the initial state of the component
   */
  constructor(id, state = {}) { // eslint-disable-line id-length
    super(id, DEFAULTS, state);
  }

  //////////////////////////////////////////////////////////////////////////////
  // Public Methods
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Private Methods
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Static Methods
  //////////////////////////////////////////////////////////////////////////////
  /**
   * Static factory method
   * @static
   * @param {object} data - configuration for the component to be created
   * @return {LevelComponent}
   */
  static create(data) {
    if (data === null) {
      throw new Error('Abilities component configuration missing');
    }
    return new LevelComponent(data.id, data.state);
  }
}

////////////////////////////////////////////////////////////////////////////////
// Exports
////////////////////////////////////////////////////////////////////////////////
export default LevelComponent;
