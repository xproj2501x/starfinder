/**
 * Starfinder - CharacterFactory
 * ===
 *
 * @module characterFactory
 */

////////////////////////////////////////////////////////////////////////////////
// Imports
////////////////////////////////////////////////////////////////////////////////
import {MESSAGES} from '../../engine/constants';
import MessageService from '../../framework/services/message';
import CharacterModel from '../models/character-model';

////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Class
////////////////////////////////////////////////////////////////////////////////
/**
 * CharacterFactory
 * @class
 */
class CharacterFactory {

  //////////////////////////////////////////////////////////////////////////////
  // Private Properties
  //////////////////////////////////////////////////////////////////////////////
  _messageService;
  _characterModel;

  //////////////////////////////////////////////////////////////////////////////
  // Public Properties
  //////////////////////////////////////////////////////////////////////////////

  /**
   * CharacterFactory
   * @constructor
   */
  constructor() {
    this._messageService = MessageService.create();
  }

  //////////////////////////////////////////////////////////////////////////////
  // Public Methods
  //////////////////////////////////////////////////////////////////////////////
  createCharacter() {
    this._messageService.subscribe(MESSAGES.ENTITY_CREATED, (message) => this.handleEntityCreated(message));
    this._messageService.subscribe(MESSAGES.COMPONENT_CREATED, (message) => this.handleComponentCreated(message));
    this._messageService.publish({
      subject: MESSAGES.CREATE_ENTITY
    });
  }

  handleEntityCreated(message) {
    const BASE = {
      id: message.id,
      state: {}
    };

    this._characterModel = CharacterModel.create(BASE);
    this._messageService.unsubscribe(MESSAGES.ENTITY_CREATED, (message) => this.handleEntityCreated(message));

  }

  handleComponentCreated(message) {
    const EVENT = message.body;

    console.log(EVENT);
    // this._characterModel.applyEvent(EVENT);
  }
  //////////////////////////////////////////////////////////////////////////////
  // Private Methods
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Static Methods
  //////////////////////////////////////////////////////////////////////////////

}

////////////////////////////////////////////////////////////////////////////////
// Exports
////////////////////////////////////////////////////////////////////////////////
export default CharacterFactory;
