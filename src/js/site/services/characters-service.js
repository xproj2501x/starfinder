/**
 * Starfinder - Characters Service
 * ===
 *
 * @module charactersService
 */

////////////////////////////////////////////////////////////////////////////////
// Imports
////////////////////////////////////////////////////////////////////////////////
import {API_ENDPOINTS, API_HOST} from '../../constants';
import AjaxService from '../../framework/services/ajax-service';
import LogService from '../../framework/services/log';
import CharacterFactory from '../../game/factories/character-factory';


////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////
const LOG_SERVICE = LogService.create();

////////////////////////////////////////////////////////////////////////////////
// Class
////////////////////////////////////////////////////////////////////////////////
/**
 * CharactersService
 * @class
 */
class CharactersService {

  //////////////////////////////////////////////////////////////////////////////
  // Private Properties
  //////////////////////////////////////////////////////////////////////////////
  _logger;
  _ajaxService;
  _characterFactory;

  //////////////////////////////////////////////////////////////////////////////
  // Public Properties
  //////////////////////////////////////////////////////////////////////////////

  /**
   * CharactersService
   * @constructor
   */
  constructor() {
    this._logger = LOG_SERVICE.registerLogger(this.constructor.name);
    this._ajaxService = new AjaxService();
    this._characterFactory = new CharacterFactory();
  }

  //////////////////////////////////////////////////////////////////////////////
  // Public Methods
  //////////////////////////////////////////////////////////////////////////////
  createCharacter() {
    this._characterFactory.createCharacter();
  }

  getCharacters() {
    let OPTIONS = {
      url: API_HOST + API_ENDPOINTS.CHARACTERS + '.json',
      headers: this._buildHeaders()
    };

    return this._ajaxService.get(OPTIONS)
      .then((response) => {
        this._logger.log(response);
        return JSON.parse(response.responseText);
      }).catch((err) => {
        this._logger.error(err);
        throw err;
      });
  }

  //////////////////////////////////////////////////////////////////////////////
  // Private Methods
  //////////////////////////////////////////////////////////////////////////////
  _buildHeaders(token) {
    let headers = {
      'Content-Type': 'application/json',
      'Accept': 'application/json'
    };
    return headers;
  }
}

////////////////////////////////////////////////////////////////////////////////
// Exports
////////////////////////////////////////////////////////////////////////////////
export default CharactersService;
