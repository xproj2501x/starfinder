/**
 * Starfinder - Modifier Model
 * ===
 *
 * @module modifierModel
 */

////////////////////////////////////////////////////////////////////////////////
// Imports
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Class
////////////////////////////////////////////////////////////////////////////////
/**
 * ModifierModel
 * @class
 */
class ModifierModel {

  //////////////////////////////////////////////////////////////////////////////
  // Private Properties
  //////////////////////////////////////////////////////////////////////////////
  _id;
  _component;
  _property;
  _value;
  _source;

  //////////////////////////////////////////////////////////////////////////////
  // Public Properties
  //////////////////////////////////////////////////////////////////////////////


  /**
   * ModifierModel
   * @constructor
   * @param {int} type - the type of the component to be created
   * @param {object} state - the initial state of the component
   */
  constructor(type, componentType, value) {
    this._data = [];
    this._data[MAP.TYPE] = type;
    this._data[MAP.COMPONENT_TYPE] = componentType;
    this._data[MAP.VALUE] = value;
  }

  //////////////////////////////////////////////////////////////////////////////
  // Public Methods
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Private Methods
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Static Methods
  //////////////////////////////////////////////////////////////////////////////
  /**
   * Static factory method
   * @static
   * @param {object} data - configuration for the component to be created
   * @return {ModifierModel}
   */
  static create(data) {
    if (data === null) {
      throw new Error('Modifier configuration missing');
    }
    return new ModifierModel(data.type, data.componentType, data.state);
  }
}

////////////////////////////////////////////////////////////////////////////////
// Exports
////////////////////////////////////////////////////////////////////////////////
export default ModifierModel;
