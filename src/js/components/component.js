/**
 * Starfinder - Component
 * ===
 *
 * @module component
 */

////////////////////////////////////////////////////////////////////////////////
// Imports
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////
const MAP = {
  ID: 0x000000,
  TYPE: 0x000001,
  STATE: 0x00002
};

////////////////////////////////////////////////////////////////////////////////
// Class
////////////////////////////////////////////////////////////////////////////////
/**
 * Component
 * @class
 */
class Component {

  //////////////////////////////////////////////////////////////////////////////
  // Static Properties
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Private Properties
  //////////////////////////////////////////////////////////////////////////////
  /**
   * The UUID of the parent entity, type, and state of the component
   * @private
   * @type {Array}
   */
  _data;


  //////////////////////////////////////////////////////////////////////////////
  // Public Properties
  //////////////////////////////////////////////////////////////////////////////
  /**
   * Returns the UUID of the parent entity
   * @readonly
   * @return {string}
   */
  get id() { // eslint-disable-line id-length
    return this._data[MAP.ID];
  }

  /**
   * Returns the type of the component
   * @readonly
   * @return {int}
   */
  get type() {
    return this._data[MAP.TYPE];
  }

  /**
   * Returns the state of the component
   * @readonly
   * @return {object}
   */
  get state() {
    return this._data[MAP.STATE];
  }

  /**
   * Component
   * @constructor
   * @param {string} id - the UUID of the parent entity
   * @param {int} type - the type of the component to be created
   * @param {object} state - the initial state of the component
   */
  constructor(id, type, state) { // eslint-disable-line id-length
    this._data = [];
    this._data[MAP.ID] = id;
    this._data[MAP.TYPE] = type;
    this._data[MAP.STATE] = Object.assign({}, state);
  }

  //////////////////////////////////////////////////////////////////////////////
  // Public Methods
  //////////////////////////////////////////////////////////////////////////////
  /**
   * Updates the state of the component with new values
   * @param {object} state - the new state of the component
   */
  update(state) {
    const LAST_STATE = this._data[MAP.STATE];

    for (const KEY in state) {
      if (!LAST_STATE.hasOwnProperty(KEY)) {
        throw new Error(`Invalid property: ${KEY} for component type: ${this._data[MAP.TYPE]}`);
      }
    }
    this._data[MAP.STATE] = Object.assign({}, LAST_STATE, state);
  }

  //////////////////////////////////////////////////////////////////////////////
  // Private Methods
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Static Methods
  //////////////////////////////////////////////////////////////////////////////
  /**
   * Static factory method
   * @static
   * @param {object} data - configuration for the component to be created
   * @return {Component}
   */
  static create(data) {
    if (data === null) {
      throw new Error('Component configuration missing');
    }
    return new Component(data.id, data.type, data.state);
  }
}

////////////////////////////////////////////////////////////////////////////////
// Exports
////////////////////////////////////////////////////////////////////////////////
export default Component;
