/**
 * Starfinder - Health Component
 * ===
 *
 * @module healthComponent
 */

////////////////////////////////////////////////////////////////////////////////
// Imports
////////////////////////////////////////////////////////////////////////////////
import ComponentModel from '../models/component-model';

////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////
/**
 * Proeprty names for the component
 * @enum {string}
 */
const KEYS = {
  MAX_STAMINA: 'maxStamina',
  CURRENT_STAMINA: 'currentStamina',
  MAX_HIT_POINTS: 'maxHitPoints',
  CURRENT_HIT_POINTS: 'currentHitPoints',
  MAX_RESOLVE: 'maxResolve',
  CURRENT_RESOLVE: 'currentResolve'
};

/**
 * Default values for the component
 * @enum {*}
 */
const DEFAULTS = {
  maxStamina: 0,
  currentStamina: 0,
  maxHitPoints: 0,
  currentHitPoints: 0,
  maxResolve: 0,
  currentResolve: 0
};
////////////////////////////////////////////////////////////////////////////////
// Class
////////////////////////////////////////////////////////////////////////////////
/**
 * HealthComponent
 * @class
 * @extends ComponentModel
 */
class HealthComponent extends ComponentModel {

  //////////////////////////////////////////////////////////////////////////////
  // Private Properties
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Public Properties
  //////////////////////////////////////////////////////////////////////////////
  get maxStamina() {
    return this._getProperty(KEYS.MAX_STAMINA);
  }

  get currentStamina() {
    return this._getProperty(KEYS.CURRENT_STAMINA);
  }

  get maxHitPoints() {
    return this._getProperty(KEYS.MAX_HIT_POINTS);
  }

  get currentHitPoints() {
    return this._getProperty(KEYS.CURRENT_HIT_POINTS);
  }

  get maxResolve() {
    return this._getProperty(KEYS.MAX_RESOLVE);
  }

  get currentResolve() {
    return this._getProperty(KEYS.CURRENT_RESOLVE);
  }

  /**
   * AttributesComponent
   * @constructor
   * @param {string} id - the id of the parent entity
   * @param {object} state - the initial state of the component
   */
  constructor(id, state = {}) { // eslint-disable-line id-length
    super(id, DEFAULTS, state);
  }

  //////////////////////////////////////////////////////////////////////////////
  // Public Methods
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Private Methods
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Static Methods
  //////////////////////////////////////////////////////////////////////////////
  /**
   * Static factory method
   * @static
   * @param {object} data - configuration for the component to be created
   * @return {HealthComponent}
   */
  static create(data) {
    if (data === null) {
      throw new Error('Health component configuration missing');
    }
    return new HealthComponent(data.id, data.state);
  }
}

////////////////////////////////////////////////////////////////////////////////
// Exports
////////////////////////////////////////////////////////////////////////////////
export default HealthComponent;
